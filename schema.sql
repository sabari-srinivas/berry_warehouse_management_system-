CREATE TABLE inventory (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    berry_type VARCHAR2(50) NOT NULL,
    batch_number VARCHAR2(50) NOT NULL,
    harvest_date DATE NOT NULL,
    quantity NUMBER NOT NULL CHECK (quantity >= 0),
    storage_location VARCHAR2(100) NOT NULL
);

CREATE OR REPLACE PROCEDURE add_shipment (
    p_berry_type IN VARCHAR2,
    p_batch_number IN VARCHAR2,
    p_harvest_date IN DATE,
    p_quantity IN NUMBER,
    p_storage_location IN VARCHAR2
) AS
    v_total_quantity NUMBER;
BEGIN
    SELECT SUM(quantity) INTO v_total_quantity
    FROM inventory
    WHERE storage_location = p_storage_location;

    IF v_total_quantity + p_quantity > 500 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Overstock: Cannot add shipment as it exceeds the location capacity of 500.');
    ELSE
        INSERT INTO inventory (berry_type, batch_number, harvest_date, quantity, storage_location)
        VALUES (p_berry_type, p_batch_number, p_harvest_date, p_quantity, p_storage_location);
    END IF;
END add_shipment;

CREATE OR REPLACE PROCEDURE update_stock (
    p_id IN NUMBER,
    p_quantity IN NUMBER,
    p_storage_location IN VARCHAR2
) AS
BEGIN
    UPDATE inventory
    SET quantity = p_quantity, storage_location = p_storage_location
    WHERE id = p_id;
END update_stock;

CREATE OR REPLACE FUNCTION view_stock RETURN SYS_REFCURSOR AS
    stock_cursor SYS_REFCURSOR;
BEGIN
    OPEN stock_cursor FOR 
    SELECT berry_type, batch_number, harvest_date,
        quantity,
        storage_location,
        CASE
            WHEN harvest_date < TRUNC(SYSDATE) - 7 THEN 'Expired'
            ELSE 'Fresh'
        END AS status
    FROM inventory;

    RETURN stock_cursor;
END view_stock;

CREATE OR REPLACE FUNCTION view_location_quantities RETURN SYS_REFCURSOR AS
    location_cursor SYS_REFCURSOR;
BEGIN
    OPEN location_cursor FOR 
    SELECT storage_location, SUM(quantity) AS total_quantity
    FROM inventory
    GROUP BY storage_location;

    RETURN location_cursor;
END view_location_quantities;

CREATE OR REPLACE PROCEDURE delete_stock (
    p_id IN NUMBER
) AS
BEGIN
    DELETE FROM inventory WHERE id = p_id;
END delete_stock;
